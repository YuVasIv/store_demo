--
-- Script was generated by Devart dbForge Studio 2021 for SQL Server, Version 6.0.327.0
-- Product home page: http://www.devart.com/dbforge/sql/studio
-- Script date 01/06/2021 11:20:45
-- Server version: 15.00.2000
--


SET DATEFORMAT ymd
SET ARITHABORT, ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER, ANSI_NULLS, NOCOUNT ON
SET NUMERIC_ROUNDABORT, IMPLICIT_TRANSACTIONS, XACT_ABORT OFF
GO

USE BicycleStoreProd
GO

IF DB_NAME() <> N'BicycleStoreProd' SET NOEXEC ON
GO

--
-- Create schema [Sales]
--
PRINT (N'Create schema [Sales]')
GO
CREATE SCHEMA Sales
GO

--
-- Create table [Sales].[Store]
--
PRINT (N'Create table [Sales].[Store]')
GO
CREATE TABLE Sales.Store (
  StoreId int IDENTITY,
  StoreName varchar(255) NOT NULL,
  Phone varchar(25) NULL,
  EMail varchar(255) NULL,
  Street varchar(255) NULL,
  City varchar(245) NULL,
  State varchar(10) NULL,
  Zip char(5) NULL,
  PRIMARY KEY CLUSTERED (StoreId)
)
ON [PRIMARY]
GO

--
-- Create table [Sales].[Staff]
--
PRINT (N'Create table [Sales].[Staff]')
GO
CREATE TABLE Sales.Staff (
  StaffId int IDENTITY,
  FirstName varchar(50) NOT NULL,
  LastName varchar(50) NOT NULL,
  Email varchar(255) NOT NULL,
  Phone varchar(25) NULL,
  Active tinyint NOT NULL,
  StoreId int NOT NULL,
  ManagerId int NULL,
  PRIMARY KEY CLUSTERED (StaffId),
  UNIQUE (Email)
)
ON [PRIMARY]
GO

--
-- Create table [Sales].[OrderItem]
--
PRINT (N'Create table [Sales].[OrderItem]')
GO
CREATE TABLE Sales.OrderItem (
  OrderId int NOT NULL,
  ItemId int NOT NULL,
  ProductId int NOT NULL,
  Qty int NOT NULL,
  Price decimal(10, 2) NOT NULL,
  Discount decimal(4, 2) NOT NULL DEFAULT (0),
  PRIMARY KEY CLUSTERED (OrderId, ItemId)
)
ON [PRIMARY]
GO

--
-- Create table [Sales].[Order]
--
PRINT (N'Create table [Sales].[Order]')
GO
CREATE TABLE Sales.[Order] (
  OrderId int IDENTITY,
  CustomerId int NULL,
  OrderStatus tinyint NOT NULL,
  OrderDate date NOT NULL,
  RequiredDate date NOT NULL,
  ShippedDate date NULL,
  StoreId int NOT NULL,
  StaffId int NOT NULL,
  PRIMARY KEY CLUSTERED (OrderId)
)
ON [PRIMARY]
GO

--
-- Create table [Sales].[Customer]
--
PRINT (N'Create table [Sales].[Customer]')
GO
CREATE TABLE Sales.Customer (
  CustomerId int IDENTITY,
  LastName varchar(255) NOT NULL,
  Phone varchar(25) NULL,
  Email varchar(255) NOT NULL,
  Address varchar(255) NULL,
  City char(50) NULL,
  State varchar(30) NULL,
  Zip varchar(5) NOT NULL,
  PRIMARY KEY CLUSTERED (CustomerId)
)
ON [PRIMARY]
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO

--
-- Create or alter view [Sales].[vwCustomer]
--
GO
PRINT (N'Create or alter view [Sales].[vwCustomer]')
GO

CREATE OR ALTER VIEW Sales.vwCustomer
AS
SELECT        LastName, Phone, Email, Address, Zip, State
FROM            Sales.Customer
GO

--
-- Create or alter view [dbo].[vwCustomer]
--
GO
PRINT (N'Create or alter view [dbo].[vwCustomer]')
GO
CREATE OR ALTER VIEW dbo.vwCustomer
AS
SELECT        LastName, Phone, Email, Address, Zip, State
FROM            Sales.Customer
GO

--
-- Add extended property [MS_DiagramPane1] on view [dbo].[vwCustomer]
--
PRINT (N'Add extended property [MS_DiagramPane1] on view [dbo].[vwCustomer]')
GO
EXEC sys.sp_addextendedproperty N'MS_DiagramPane1', N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "Customer (Sales)"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 243
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', 'SCHEMA', N'dbo', 'VIEW', N'vwCustomer'
GO

--
-- Add extended property [MS_DiagramPaneCount] on view [dbo].[vwCustomer]
--
PRINT (N'Add extended property [MS_DiagramPaneCount] on view [dbo].[vwCustomer]')
GO
EXEC sys.sp_addextendedproperty N'MS_DiagramPaneCount', 1, 'SCHEMA', N'dbo', 'VIEW', N'vwCustomer'
GO

--
-- Create schema [Production]
--
PRINT (N'Create schema [Production]')
GO
CREATE SCHEMA Production
GO

--
-- Create table [Production].[Stock]
--
PRINT (N'Create table [Production].[Stock]')
GO
CREATE TABLE Production.Stock (
  StoreId int NOT NULL,
  ProductId int NOT NULL,
  Qty int NULL,
  PRIMARY KEY CLUSTERED (StoreId, ProductId)
)
ON [PRIMARY]
GO

--
-- Create table [Production].[Product]
--
PRINT (N'Create table [Production].[Product]')
GO
CREATE TABLE Production.Product (
  ProductId int IDENTITY,
  ProductName varchar(255) NOT NULL,
  BrandId int NOT NULL,
  CategoryId int NOT NULL,
  ModelYear smallint NULL,
  Price decimal(10, 2) NOT NULL,
  PRIMARY KEY CLUSTERED (ProductId)
)
ON [PRIMARY]
GO

--
-- Create table [Production].[Category]
--
PRINT (N'Create table [Production].[Category]')
GO
CREATE TABLE Production.Category (
  CategoryId int IDENTITY,
  CategoryName varchar(255) NOT NULL,
  PRIMARY KEY CLUSTERED (CategoryId)
)
ON [PRIMARY]
GO

--
-- Create table [Production].[Brand]
--
PRINT (N'Create table [Production].[Brand]')
GO
CREATE TABLE Production.Brand (
  BrandId int IDENTITY,
  BrandName varchar(255) NOT NULL,
  PRIMARY KEY CLUSTERED (BrandId)
)
ON [PRIMARY]
GO

--
-- Create user [JordanSanders]
--
PRINT (N'Create user [JordanSanders]')
GO
CREATE USER JordanSanders
  WITHOUT LOGIN
GO

-- 
-- Dumping data for table Store
--
PRINT (N'Dumping data for table Store')
-- Table BicycleStoreProd.Sales.Store does not contain any data (it is empty)

-- 
-- Dumping data for table Stock
--
PRINT (N'Dumping data for table Stock')
-- Table BicycleStoreProd.Production.Stock does not contain any data (it is empty)

-- 
-- Dumping data for table Staff
--
PRINT (N'Dumping data for table Staff')
-- Table BicycleStoreProd.Sales.Staff does not contain any data (it is empty)

-- 
-- Dumping data for table Product
--
PRINT (N'Dumping data for table Product')
-- Table BicycleStoreProd.Production.Product does not contain any data (it is empty)

-- 
-- Dumping data for table OrderItem
--
PRINT (N'Dumping data for table OrderItem')
-- Table BicycleStoreProd.Sales.OrderItem does not contain any data (it is empty)

-- 
-- Dumping data for table [Order]
--
PRINT (N'Dumping data for table [Order]')
-- Table BicycleStoreProd.Sales.[Order] does not contain any data (it is empty)

-- 
-- Dumping data for table Customer
--
PRINT (N'Dumping data for table Customer')
-- Table BicycleStoreProd.Sales.Customer does not contain any data (it is empty)

-- 
-- Dumping data for table Category
--
PRINT (N'Dumping data for table Category')
-- Table BicycleStoreProd.Production.Category does not contain any data (it is empty)

-- 
-- Dumping data for table Brand
--
PRINT (N'Dumping data for table Brand')
-- Table BicycleStoreProd.Production.Brand does not contain any data (it is empty)

USE BicycleStoreProd
GO

IF DB_NAME() <> N'BicycleStoreProd' SET NOEXEC ON
GO

--
-- Create foreign key on table [Sales].[Staff]
--
PRINT (N'Create foreign key on table [Sales].[Staff]')
GO
ALTER TABLE Sales.Staff
  ADD FOREIGN KEY (ManagerId) REFERENCES Sales.Staff (StaffId)
GO

--
-- Create foreign key on table [Sales].[Staff]
--
PRINT (N'Create foreign key on table [Sales].[Staff]')
GO
ALTER TABLE Sales.Staff
  ADD FOREIGN KEY (ManagerId) REFERENCES Sales.Staff (StaffId)
GO

--
-- Create foreign key on table [Sales].[Staff]
--
PRINT (N'Create foreign key on table [Sales].[Staff]')
GO
ALTER TABLE Sales.Staff
  ADD FOREIGN KEY (StoreId) REFERENCES Sales.Store (StoreId)
GO

--
-- Create foreign key on table [Sales].[Staff]
--
PRINT (N'Create foreign key on table [Sales].[Staff]')
GO
ALTER TABLE Sales.Staff
  ADD FOREIGN KEY (StoreId) REFERENCES Sales.Store (StoreId)
GO

--
-- Create foreign key on table [Sales].[Order]
--
PRINT (N'Create foreign key on table [Sales].[Order]')
GO
ALTER TABLE Sales.[Order]
  ADD FOREIGN KEY (StaffId) REFERENCES Sales.Staff (StaffId)
GO

--
-- Create foreign key on table [Sales].[Order]
--
PRINT (N'Create foreign key on table [Sales].[Order]')
GO
ALTER TABLE Sales.[Order]
  ADD FOREIGN KEY (StaffId) REFERENCES Sales.Staff (StaffId)
GO

--
-- Create foreign key on table [Sales].[Order]
--
PRINT (N'Create foreign key on table [Sales].[Order]')
GO
ALTER TABLE Sales.[Order]
  ADD FOREIGN KEY (StoreId) REFERENCES Sales.Store (StoreId)
GO

--
-- Create foreign key on table [Sales].[Order]
--
PRINT (N'Create foreign key on table [Sales].[Order]')
GO
ALTER TABLE Sales.[Order]
  ADD FOREIGN KEY (StoreId) REFERENCES Sales.Store (StoreId)
GO

--
-- Create foreign key on table [Production].[Product]
--
PRINT (N'Create foreign key on table [Production].[Product]')
GO
ALTER TABLE Production.Product
  ADD FOREIGN KEY (BrandId) REFERENCES Production.Brand (BrandId) ON DELETE CASCADE ON UPDATE CASCADE
GO

--
-- Create foreign key on table [Production].[Product]
--
PRINT (N'Create foreign key on table [Production].[Product]')
GO
ALTER TABLE Production.Product
  ADD FOREIGN KEY (CategoryId) REFERENCES Production.Category (CategoryId) ON DELETE CASCADE ON UPDATE CASCADE
GO

--
-- Create foreign key on table [Sales].[OrderItem]
--
PRINT (N'Create foreign key on table [Sales].[OrderItem]')
GO
ALTER TABLE Sales.OrderItem
  ADD FOREIGN KEY (OrderId) REFERENCES Sales.[Order] (OrderId) ON DELETE CASCADE ON UPDATE CASCADE
GO

--
-- Create foreign key on table [Sales].[OrderItem]
--
PRINT (N'Create foreign key on table [Sales].[OrderItem]')
GO
ALTER TABLE Sales.OrderItem
  ADD FOREIGN KEY (ProductId) REFERENCES Production.Product (ProductId) ON DELETE CASCADE ON UPDATE CASCADE
GO

--
-- Create foreign key on table [Production].[Stock]
--
PRINT (N'Create foreign key on table [Production].[Stock]')
GO
ALTER TABLE Production.Stock
  ADD FOREIGN KEY (ProductId) REFERENCES Production.Product (ProductId) ON DELETE CASCADE ON UPDATE CASCADE
GO

--
-- Create foreign key on table [Production].[Stock]
--
PRINT (N'Create foreign key on table [Production].[Stock]')
GO
ALTER TABLE Production.Stock
  ADD FOREIGN KEY (StoreId) REFERENCES Sales.Store (StoreId) ON DELETE CASCADE ON UPDATE CASCADE
GO
SET NOEXEC OFF
GO